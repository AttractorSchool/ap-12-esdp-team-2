# Generated by Django 4.2.13 on 2024-07-17 12:40

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('iata_code', models.CharField(db_index=True, max_length=20, verbose_name='Код города')),
                ('name', models.CharField(max_length=50, verbose_name='Название города')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Имя сообщества')),
                ('logo', models.ImageField(default='club/logos/club-icon.png', upload_to='club/logos', validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'jpeg'])], verbose_name='Логотип')),
                ('whatsapp_group_link', models.URLField(blank=True, null=True, verbose_name='Ссылка на группу Whatsapp')),
                ('description', models.TextField(validators=[django.core.validators.MinLengthValidator(200)], verbose_name='Описание')),
                ('email', models.EmailField(max_length=254, verbose_name='Контактный email')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть введен в формате: '+999999999'. Максимум 15 чисел.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Контактный телефон')),
                ('address', models.CharField(blank=True, default='No location', max_length=150, verbose_name='Локация клуба')),
                ('members_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Кол-во участников')),
                ('likes_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Кол-во лайков')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность')),
                ('is_private', models.BooleanField(default=False, verbose_name='Приватный клуб')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
                ('partners_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='Кол-во партнеров')),
            ],
            options={
                'verbose_name': 'Клуб',
                'verbose_name_plural': 'Клубы',
                'ordering': ('-members_count', '-likes_count', 'name'),
            },
        ),
        migrations.CreateModel(
            name='ClubAdType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
            ],
        ),
        migrations.CreateModel(
            name='ClubCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название категории')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активность')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создана')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлена')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='ClubService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('club', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='services', to='clubs.club', verbose_name='Клуб')),
            ],
            options={
                'verbose_name': 'Услуга клуба',
                'verbose_name_plural': 'Услуги клуба',
            },
        ),
        migrations.CreateModel(
            name='Festival',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('image', models.ImageField(upload_to='clubs/festival_photo', validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'jpeg'])], verbose_name='Фото')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_datetime', models.DateTimeField(verbose_name='Дата начала')),
                ('location', models.CharField(max_length=200)),
                ('approved_clubs', models.ManyToManyField(blank=True, related_name='approved_on_festival', to='clubs.club', verbose_name='Приглашенные клубы')),
            ],
            options={
                'verbose_name': 'Фестиваль',
                'verbose_name_plural': 'Фестивали',
            },
        ),
        migrations.CreateModel(
            name='FestivalParticipationRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('approved', models.BooleanField(default=None, null=True, verbose_name='Приглашен')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='festival_participation_request', to='clubs.club')),
                ('festival', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='clubs.festival')),
            ],
            options={
                'verbose_name': 'Запрос на участие в фестивале',
                'verbose_name_plural': 'Запросы на участие в фестивале',
            },
        ),
        migrations.CreateModel(
            name='ClubServiceImage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='club/service_images', validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'jpeg'])], verbose_name='Фото')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='clubs.clubservice')),
            ],
            options={
                'verbose_name': 'Изображение для услуги клуба',
                'verbose_name_plural': 'Изображения для услуг клуба',
            },
        ),
        migrations.CreateModel(
            name='ClubPartnerShipRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('approved', models.BooleanField(default=None, null=True, verbose_name='Принято')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club_accepter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnership_receive_requests', to='clubs.club', verbose_name='Принимающий клуб')),
                ('club_requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='partnership_send_requests', to='clubs.club', verbose_name='Запрашивающий клуб')),
            ],
        ),
        migrations.CreateModel(
            name='ClubJoinRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('approved', models.BooleanField(default=None, null=True, verbose_name='Принят')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_join_requests', to='clubs.club', verbose_name='Клуб')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_join_requests', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Запрос на вступление в клуб',
                'verbose_name_plural': 'Запросы на вступление в клуб',
            },
        ),
        migrations.CreateModel(
            name='ClubGalleryPhoto',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='clubs/gallery', verbose_name='Фото')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery_photos', to='clubs.club', verbose_name='Клуб')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фото',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='ClubEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=150, verbose_name='Название события')),
                ('description', models.TextField(verbose_name='Описание')),
                ('banner', models.ImageField(upload_to='clubs/event_banners', verbose_name='Баннер события')),
                ('location', models.CharField(max_length=150, verbose_name='Место проведения')),
                ('start_datetime', models.DateTimeField(verbose_name='Дата и время начала')),
                ('old_datetime', models.DateTimeField(blank=True, null=True)),
                ('end_datetime', models.DateTimeField(verbose_name='Дата и время завершения')),
                ('min_age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальный возраст для входа')),
                ('max_age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Максимальный возраст для входа')),
                ('entry_requirements', models.TextField(blank=True, null=True, verbose_name='Требования для входа')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_events', to='clubs.club', verbose_name='Клуб')),
            ],
            options={
                'verbose_name': 'Событие',
                'verbose_name_plural': 'События',
            },
        ),
        migrations.CreateModel(
            name='ClubAds',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=150, verbose_name='Название события')),
                ('description', models.TextField(verbose_name='Описание')),
                ('img', models.ImageField(upload_to='clubs/ad_photos', verbose_name='Фото объявления')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='club_ads', to='clubs.club', verbose_name='Клуб')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='clubs.clubadtype')),
            ],
            options={
                'verbose_name': 'Объявление',
                'verbose_name_plural': 'Объявления',
            },
        ),
        migrations.AddField(
            model_name='club',
            name='category',
            field=models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.PROTECT, related_name='clubs', to='clubs.clubcategory', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='club',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clubs', to='clubs.city', verbose_name='Город'),
        ),
        migrations.AddField(
            model_name='club',
            name='creater',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_clubs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='club',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='liked_by_users', to=settings.AUTH_USER_MODEL, verbose_name='Лайкнули'),
        ),
        migrations.AddField(
            model_name='club',
            name='managers',
            field=models.ManyToManyField(blank=True, related_name='managed_clubs', to=settings.AUTH_USER_MODEL, verbose_name='Управляющие клуба'),
        ),
        migrations.AddField(
            model_name='club',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='members_of_clubs', to=settings.AUTH_USER_MODEL, verbose_name='Члены клуба'),
        ),
        migrations.AddField(
            model_name='club',
            name='partners',
            field=models.ManyToManyField(blank=True, related_name='club_partners', to='clubs.club', verbose_name='Клубы-партнеры'),
        ),
        migrations.AddConstraint(
            model_name='festivalparticipationrequest',
            constraint=models.UniqueConstraint(fields=('club', 'festival'), name='unique_club_festival_request'),
        ),
        migrations.AddConstraint(
            model_name='clubjoinrequest',
            constraint=models.UniqueConstraint(fields=('user', 'club'), name='unique_user_club_join_request'),
        ),
    ]
